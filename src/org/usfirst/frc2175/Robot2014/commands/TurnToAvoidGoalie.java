// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2175.Robot2014.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2175.Robot2014.Robot;

/**
 * This class makes the robot turn to avoid a goalie robot, based on a
 * SmartDashboard input.
 */
public class  TurnToAvoidGoalie extends Command {
    
    private boolean shouldTurnRight;
    
    /** 0 = waiting to turn, 1 = turning **/
    private int state;
    
    /**
     * Turns the robot to avoid a goalie, using a SmartDashboard input provided
     * by CheesyVision.
     */
    public TurnToAvoidGoalie() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);
        requires(Robot.launcher);
        requires(Robot.arm);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        shouldTurnRight = false;
        state = 0;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        System.out.println("Avoiding goalie...\n");
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if (state == 0) {
            if (SmartDashboard.getBoolean("_AUTO_LEFT") || SmartDashboard.getBoolean("_AUTO_RIGHT")) {
                shouldTurnRight = SmartDashboard.getBoolean("_AUTO_RIGHT"); // If this is false, it means either left became true or they're both true and we can safely choose left
                state = 1;
                setTimeout(0.125);
            }
        } else if (state == 1) {
            Robot.drivetrain.ArcadeDriveWithParameters(0, (shouldTurnRight ? 1 : -1) * 0.7);
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return isTimedOut();
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.drivetrain.ArcadeDriveWithParameters(0, 0);
	System.out.println("Done avoiding goalie.\n\n");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
